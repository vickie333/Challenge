import pandas as pd
import numpy as np


def add_sma(df, window):
    df[f"SMA_{window}"] = df["close"].rolling(window=window).mean()
    return df


def add_ema(df, span):
    df[f"EMA_{span}"] = df["close"].ewm(span=span).mean()
    return df


def RSI(
        ohlc,
        period: int = 14,
        column: str = "close",
        adjust: bool = True,
    ):
        """Relative Strength Index (RSI) is a momentum oscillator that measures the speed and change of price movements.
        RSI oscillates between zero and 100. Traditionally, and according to Wilder, RSI is considered overbought when above 70 and oversold when below 30.
        Signals can also be generated by looking for divergences, failure swings and centerline crossovers.
        RSI can also be used to identify the general trend."""

        ## get the price diff
        delta = ohlc[column].diff()

        ## positive gains (up) and negative gains (down) Series
        up, down = delta.copy(), delta.copy()
        up[up < 0] = 0
        down[down > 0] = 0

        down = down.abs()

        # EMAs of ups and downs
        _gain = up.rolling(period).mean()
        _loss = down.rolling(period).mean()

        RS = _gain / _loss
        return pd.Series(100 - (100 / (1 + RS)), name="{0} period RSI".format(period))


def add_bollinger_bands(df, window=20, std_dev=2):
    sma = df["close"].rolling(window=window).mean()
    std = df["close"].rolling(window=window).std()

    df[f"BOLL_UP_{window}"] = sma + std_dev * std
    df[f"BOLL_DOWN_{window}"] = sma - std_dev * std
    return df


# Features Derivados
def add_price_distance(df, column_name):
    df[f"dist_close_to_{column_name}"] = df["close"] - df[column_name]
    return df


def add_atr(df, period=14):
    """Agrega el Average True Range (ATR)."""
    high = df["high"]
    low = df["low"]
    close = df["close"]

    prev_close = close.shift(1)

    tr = pd.concat(
        [high - low, (high - prev_close).abs(), (low - prev_close).abs()], axis=1
    ).max(axis=1)

    df[f"ATR_{period}"] = tr.rolling(window=period).mean()
    return df


def add_log_return_volatility(df, window=14):
    """Agrega la volatilidad como la desviación estándar de los log-retornos."""
    df["log_return"] = np.log(df["close"] / df["close"].shift(1))
    df[f"volatility_{window}"] = df["log_return"].rolling(window=window).std()
    return df


def add_momentum(df, period=10):
    """Agrega el indicador de momentum (precio actual - precio pasado)."""
    df[f"momentum_{period}"] = df["close"] - df["close"].shift(period)
    return df
